# TEAM-3-FINAL-PROJECT-

     from difflib import SequenceMatcher
     import os
     from docx import Document
 
    def plagiarism_checker(file1, file2):
        # Проверим, существует ли файл
       if not os.path.exists(file1),
            print(f\"Error: File '{file1}' does not exist
           return
        # Проверим, существует ли файл2,
        if not os.path.exists(file2),
           print(f\"Error: File '{file2}' does not exist
            return
        # Определим кодировку для файла1
        encoding1 = detect_encoding(file1)
        # Определим кодировку для файла2
        encoding2 = detect_encoding(file2)

            if file1.lower().endswith('.pdf')
              # Если это PDF, извлекаем текст из PDF
                pdf_text1 = extract_text_from_pdf(file1)
                file1data = ' '.join(pdf_text1)
            elif file1.lower().endswith('.docx')
                # Если это DOCX, извлекаем текст из DOCX
               docx_text1 = extract_text_from_docx(file1)
                file1data = ' '.join(docx_text1)
            else:
                # В противном случае прочитаем текст из файла
                with open(file1, encoding=encoding1, errors='ignore') as f1
                    file1data = f1.read
    
            # Процесс файла
            if file2.lower().endswith('.pdf')
                # Если это PDF, извлекаем текст из PDF
                pdf_text2 = extract_text_from_pdf(file2)
                file2data = ' '.join(pdf_text2)
            elif file2.lower().endswith('.docx')
                # Если это DOCX, извлекаем текст из DOCX
            docx_text2 = extract_text_from_docx(file2)
                file2data = ' '.join(docx_text2)
            else:
                # В противном случае прочитаем текст из файла
                with open(file2, encoding=encoding2, errors='ignore') as f2:
                    file2data = f2.read,
  
            # Вычисляем сходство с помощью SequenceMatcher
            similarity = SequenceMatcher(None, file1data, file2data).ratio()
            return similarity
    
      except Exception as e:
            # Обработка исключений во время проверки на плагиат
           print(f\"Error during plagiarism check: 
 
 
    import PyPDF2
 
    import chardet 
detect_encoding(file_path)
       Detects the encoding of a file.
    
        Parameters:
        - file_path (str): The path to the file.
   
        Returns:
        - str: The detected encoding
 
        # Откроем файл в двоичном режиме
        with open(file_path, 'rb') as f:
            # Определяем его кодировку.
           result = chardet.detect(f.read(),
   
       # Вернём обнаруженную кодировку
       return result['encoding']
  import PyPDF2
    def extract_text_from_pdf(pdf_file):

       Extracts text from a PDF file.
    
       Parameters:
       - pdf_file (str): The path to the PDF file.
    
       Returns:
      - list: A list of strings representing the text content of each page.
  
        # Открываем  PDF-файл в двоичном режиме
        with open(pdf_file, 'rb') as pdf:
            # Создаём объект PdfReader из файла PDF.
           reader = PyPDF2.PdfReader(pdf, strict=False)
            # Перебрать каждую страницу PDF-файла
           for page_num in range(len(reader.pages)),
           try:
           page = reader.pages[page_num]
           content = page.extract_text()
           #Декодируем контент для устранения проблем с кодировкой, игнорируя ошибки.
                   decoded_content = content.encode('utf-8', 'ignore').decode('utf-8')`
                  # Добавляем декодированный контент в список
                   pdf_text.append(decoded_content)
   
                except Exception as e:
                   print(f\"Error extracting text from PDF page {page_num + 1}:
    
            # Вернуть список, содержащий текст каждой страницы
           return pdf_text
    extracted_text = extract_text_from_pdf('report_1.pdf')
    for text in extracted_text:
     print(text)
  
        Extracts text from a DOCX file
      Parameters:
        - docx_file (str): The path to the DOCX file.
      Returns:
        - list: A list of strings representing the text content of each paragraph.

        # Создаём объект Document из файла DOCX.
        doc = Document(docx_file)
        Initialize an empty list to store the text of each paragraph
        doc_text = []
   
      # Перебрать каждый абзац документа.
        for paragraph in doc.paragraphs:
           # Добавляем текст текущего абзаца в список
           doc_text.append(paragraph.text)
    
        # Вернём список, содержащий текст каждого абзаца
        return doc_text

    # Получаем путь к файлам из пользовательского ввода
    file_path1 = input(\"Enter the path to the first file: 
    file_path2 = input(\"Enter the path to the second file: 
   
    # Пометим, чтобы проверить, прошла ли проверка на плагиат успешно
    ok = True
    
    # Провести проверку на плагиат
    result = plagiarism_checker(file_path1, file_path2)
  
    # Проверяем, не является ли результат проверки на плагиат «Нет» (успешным)
    if result is not None:
        # Распечатаем сообщение об успехе
        print(f\"Plagiarism check successful.
    
    else:
        # Распечатаем сообщение об ошибке, если проверка на плагиат не удалась
        print(\"Error: Please try again.
        # Установливаем флаг в значение False, чтобы указать на сбой.
        ok = False

    # Проверяем, прошла ли проверка на плагиат успешно
    if ok:
      # Распечатываем результат тестирования
      print(f'The result of the testing is {result * 100}% of similarity'
 
      # Проверяем процент сходства и распечатываем соответствующее сообщение.
       if result * 100 < 50:
          print(\"There is no plagiarism\")
      else:\
            print(\"Plagiarism detected\
   
